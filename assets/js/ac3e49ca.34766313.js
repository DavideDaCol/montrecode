"use strict";(self.webpackChunkmontrecode_docs=self.webpackChunkmontrecode_docs||[]).push([[278],{3631:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"pila","title":"Pila","description":"La pila \xe8 una struttura dati dinamica e lineare (come la sequenza), la quale impone una regola particolare nella gestione dell\'inserimento e rimozione degli elementi: l\'elemento da rimuovere \xe8 sempre quello che ha percorso meno tempo all\'interno dell\'insieme.","source":"@site/docs/05-pila.md","sourceDirName":".","slug":"/pila","permalink":"/montrecode/pila","draft":false,"unlisted":false,"editUrl":"https://github.com/DavideDaCol/montrecode/tree/main/docs/05-pila.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Insieme","permalink":"/montrecode/Strutture Dati Base/insieme"},"next":{"title":"Coda","permalink":"/montrecode/coda"}}');var a=i(4848),o=i(8453);const r={},l="Pila",s={},c=[{value:"Operazioni",id:"operazioni",level:2},{value:"Possibile implementazione",id:"possibile-implementazione",level:2}];function m(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"pila",children:"Pila"})}),"\n",(0,a.jsxs)(n.p,{children:["La pila \xe8 una struttura dati dinamica e lineare (come la ",(0,a.jsx)(n.a,{href:"/montrecode/Strutture%20Dati%20Base/sequenza",children:"sequenza"}),"), la quale impone una regola particolare nella gestione dell'inserimento e rimozione degli elementi: l'elemento da rimuovere \xe8 sempre quello che ha percorso meno tempo all'interno dell'insieme."]}),"\n",(0,a.jsxs)(n.p,{children:['In questi casi si parla di "Politica LIFO (Last In First Out)", siccome ',(0,a.jsx)(n.em,{children:"l'ultimo"})," elemento inserito sar\xe0 il ",(0,a.jsx)(n.em,{children:"primo"})," ad essere rimosso; \xe8 il fratello della ",(0,a.jsx)(n.a,{href:"/montrecode/coda",children:"coda"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"operazioni",children:"Operazioni"}),"\n",(0,a.jsx)(n.p,{children:"Queste le operazioni che si possono effettuare su una pila:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"// Restituisce true se la pila \xe8 vuota\nboolean isEmpty()\n// Inserisce v in cima alla pila\npush(Item v)\n// Estrae l\u2019elemento in cima alla pila e lo restituisce al chiamante\nItem pop()\n// Legge l\u2019elemento in cima alla pila\nItem top()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"possibile-implementazione",children:"Possibile implementazione"}),"\n",(0,a.jsx)(n.p,{children:"Mostriamo una possibile implementazione di una pila basata sui vettori:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"Item[ ] A // Elementi\nint n // Cursore\nint m // Dim. massima\n\nStack Stack(int dim)\n    Stack t = new Stack\n    t.A = new int[1 ... dim]\n    t.m = dim\n    t.n = 0\n    return t\n\nItem top()\n    precondition: n > 0\n    return A[n]\n\nboolean isEmpty()\n    return n = 0\n\nItem pop()\n    precondition: n > 0\n    Item t = A[n]\n    n = n \u2212 1\n    return t\n\npush(Item v)\n    precondition: n < m\n    n = n + 1\n    A[n] = v\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);