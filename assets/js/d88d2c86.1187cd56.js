"use strict";(self.webpackChunkmontrecode_docs=self.webpackChunkmontrecode_docs||[]).push([[256],{8696:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Strutture Dati Base/insieme","title":"Insieme","description":"L\'insieme \xe8 una struttura dati dinamica ma NON lineare: memorizza valori distinti senza ammettere ripetizioni, in modo non ordinato. L\'unico ordine presente nell\'insieme \xe8 l\'ordinamento eventualmente fornito dai dati stessi.","source":"@site/docs/04-Strutture Dati Base/02-insieme.md","sourceDirName":"04-Strutture Dati Base","slug":"/Strutture Dati Base/insieme","permalink":"/montrecode/Strutture Dati Base/insieme","draft":false,"unlisted":false,"editUrl":"https://github.com/DavideDaCol/montrecode/tree/main/docs/04-Strutture Dati Base/02-insieme.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Sequenza","permalink":"/montrecode/Strutture Dati Base/sequenza"},"next":{"title":"Pila","permalink":"/montrecode/pila"}}');var s=i(4848),o=i(8453);const r={sidebar_position:6},a="Insieme",c={},d=[];function u(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"insieme",children:"Insieme"})}),"\n",(0,s.jsxs)(n.p,{children:["L'insieme \xe8 una struttura dati dinamica ma NON lineare: memorizza valori distinti ",(0,s.jsx)(n.strong,{children:"senza ammettere ripetizioni"}),", in modo non ordinato. L'unico ordine presente nell'insieme \xe8 l'ordinamento eventualmente fornito ",(0,s.jsx)(n.strong,{children:"dai dati stessi"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Ecco una lista di funzioni che possiamo chiamare su qualsiasi insieme:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"Set S = new Set()\n// Restituisce la cardinalit\xe0 dell\u2019insieme\nint c = S.size()\n// Restituisce true se x \xe8 contenuto nell\u2019insieme\nboolean contains(Item x)\n// Inserisce x nell\u2019insieme, se non gi\xe0 presente\nS.insert(Item x)\n// Rimuove x dall\u2019insieme, se presente\nS.remove(Item x)\n// Restituisce un nuovo insieme che \xe8 l\u2019unione di A e B\nSet union(Set A, Set B)\n// Restituisce un nuovo insieme che \xe8 l\u2019intersezione di A e B\nSet intersection(Set A, Set B)\n// Restituisce un nuovo insieme che \xe8 la differenza di A e B\nSet difference(Set A, Set B)\n"})}),"\n",(0,s.jsx)(n.p,{children:"la complessit\xe0 di queste funzioni dipende dall'implementazione utilizzata."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);