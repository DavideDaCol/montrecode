"use strict";(self.webpackChunkmontrecode_docs=self.webpackChunkmontrecode_docs||[]).push([[941],{7398:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ordinamento","title":"Sorting","description":"Il problema dell\'ordinamento parte da una sequenza di n valori e produce come output una nuova sequenza degli stessi valori, tale che ogni valore sia minore o uguale al successivo.","source":"@site/docs/03-ordinamento.md","sourceDirName":".","slug":"/ordinamento","permalink":"/montrecode/ordinamento","draft":false,"unlisted":false,"editUrl":"https://github.com/DavideDaCol/montrecode/tree/main/docs/03-ordinamento.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Algoritmi elementari","permalink":"/montrecode/elementari"},"next":{"title":"Dizionario","permalink":"/montrecode/Strutture Dati Base/dizionario"}}');var t=i(4848),r=i(8453);const s={sidebar_position:4},a="Sorting",l={},d=[{value:"Selection sort",id:"selection-sort",level:2},{value:"Insertion sort",id:"insertion-sort",level:2},{value:"Merge sort",id:"merge-sort",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sorting",children:"Sorting"})}),"\n",(0,t.jsxs)(n.p,{children:["Il problema dell'ordinamento parte da una sequenza di n valori e produce come output una nuova sequenza degli stessi valori, tale che ",(0,t.jsx)(n.strong,{children:"ogni valore sia minore o uguale al successivo"}),".\nNel corso, tra gli innumerevoli algoritmi esistenti, ne vengono presentati: Selection Sort, Insertion Sort e Merge Sort."]}),"\n",(0,t.jsx)(n.h2,{id:"selection-sort",children:"Selection sort"}),"\n",(0,t.jsxs)(n.p,{children:["Il selection sort \xe8 l'approccio pi\xf9 immediato al problema dell'ordinamento: consiste nel ",(0,t.jsx)(n.strong,{children:"cercare il minimo"})," e posizionarlo nella posizione corretta, ripetendo l'operazione per ",(0,t.jsx)(n.em,{children:"tutti"})," i valori da ordinare."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"-------------------------------\nSelectionSort(Item[ ] A, int n)\n-------------------------------\nfor i = 1 to n \u2212 1 do\n    int min = min(A, i, n)\n    A[i] <=> A[min]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["L'algoritmo ha complessit\xe0 O(n^2), in quanto cercare il minimo ha costo lineare e va fatto per ogni elemento dell'array. L'implementazione della funzione min si trova negli ",(0,t.jsx)(n.a,{href:"/montrecode/elementari#minimo",children:"algoritmi elementari"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"insertion-sort",children:"Insertion sort"}),"\n",(0,t.jsxs)(n.p,{children:["Insertion sort prende un approccio leggermente diverso: partendo dal primo elemento, ",(0,t.jsx)(n.strong,{children:"sposta indietro gli elementi successivi"})," finch\xe8 il valore precedente non \xe8 pi\xf9 grande di quello spostato."]}),"\n",(0,t.jsx)(n.p,{children:"Ripetendo questa operazione per tutto l'array otteniamo un ordinamento corretto."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"-------------------------------\nInsertionSort(Item[ ] A, int n)\n-------------------------------\nfor i = 2 to n do\n    Item temp = A[i]\n    int j = i\n    while j > 1 and A[j \u2212 1] > temp do\n        A[j] = A[j \u2212 1]\n        j = j \u2212 1\n    A[j] = temp\n"})}),"\n",(0,t.jsx)(n.p,{children:"Questo algoritmo ha sempre complessit\xe0 O(n^2), ma risulta piuttosto rapido su array di dimensioni ridotte."}),"\n",(0,t.jsx)(n.h2,{id:"merge-sort",children:"Merge sort"}),"\n",(0,t.jsxs)(n.p,{children:["In poche parole, merge sort si basa su una strategia risolutiva detta ",(0,t.jsx)(n.strong,{children:"divide et impera"}),", dove si cerca di scomporre il problema in sottoproblemi di piccola dimensione (",(0,t.jsx)(n.em,{children:"divide"}),") e di risolvere ogni sottoproblema (",(0,t.jsx)(n.em,{children:"impera"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Merge sort parte dall'array intero e lo continua a dividere in sottovettori di dimensione n/2, finch\xe8 non \xe8 pi\xf9 possibile fare altre divisioni; una volta fatto ci\xf2, i vettori vengono ricomposti in modo che ogni unione (",(0,t.jsx)(n.em,{children:"merge"}),") porti ad un sottovettore ordinato, fino ad arrivare al vettore finale."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"-----------------------------------------------\nMerge(Item A[ ], int start, int end , int mid )\n-----------------------------------------------\nint i, j, k, h\ni = start\nj = mid + 1\nk = start\nwhile i \u2264 mid and j \u2264 end do\n    if A[i] \u2264 A[j] then\n        B[k] = A[i]\n        i = i + 1\n    else\n        B[k] = A[j]\n        j = j + 1\n    k = k + 1\nj = end\nfor h = mid downto i do\n    A[j] = A[h]\n    j = j \u2212 1\nfor j = start to k \u2212 1 do\n    A[j] = B[j]\n"})}),"\n",(0,t.jsx)(n.p,{children:"la funzione merge unisce due sottovettori in modo che il risultato finale sia ordinato; ha costo O(n)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"-----------------------------------------\nMergeSort(Item A[ ], int start, int end )\n-----------------------------------------\nif start < end then\n    int mid = floor((start + end)/2)\n    MergeSort(A, start, mid)\n    MergeSort(A, mid + 1, end)\n    Merge(A, start, end, mid)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Merge sort ha una complessit\xe0 O(n log n), la spiegazione di questo risultato trascende lo scopo di questa reference."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var o=i(6540);const t={},r=o.createContext(t);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);